solver.method = 'glm',
solver.args = list(family='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
# outcome model second stage
q2Main <- buildModelObjSubset(model = ~ L1 + A1 + L1:A1 + I((1-A1)):L2 + I((1-A1)*A2) + I((1-A1)*A2):L2,
solver.method = 'lm',
predict.method = 'predict.lm', dp = 2, subset = "s1,s2")
q2Cont <- NULL
q1Main <- buildModelObjSubset(model = ~ L1 + A1 + A1:L1,
solver.method = 'lm',
predict.method = 'predict.lm', dp = 1, subset = "s1")
q1Cont <- NULL
# regime function second stage
regime2 <- function(eta2, data){return(data$A1 + {1L-data$A1}*{data$L2 < eta2})}
# regime function first stage
regime1 <- function(eta1, data){return(as.integer(x = {data$L1 < eta1})) }
#### Analysis using AIPW
foo = function (data) {
optimalSeq(moPropen =list(p1, p2),
moMain = list(q1Main, q2Main),
moCont = NULL,
fSet = list(fSet1,fSet2),
regimes = list(regime1, regime2),
data = data, response = data$Y, txName = c('A1', 'A2'),
Domains = rbind(c(200, 300), c(650,750)),
pop.size = 500,
starting.values = c(250, 700))
}
save_runs = mclapply(data_set, foo,  mc.cores = 4)
coeffs = list()
for (i in 1:niter){
coeffs[[i]] <-regimeCoef(object = save_runs[[i]])
}
out = as.data.frame(matrix(unlist(coeffs), byrow = T, ncol = 2))
colnames(out) = c('eta1', 'eta2')
out
##Available methods
# Coefficients of the regression objects
coef(object = fit_AIPW)
# Description of method used to obtain object
DTRstep(object = fit_AIPW)
# Estimated value of the optimal treatment regime for training set
estimator(x = fit_AIPW)
# Value object returned by regression methods
fitObject(object = fit_AIPW)
# Retrieve the results of genetic algorithm
genetic(object = fit_AIPW)
# Estimated optimal treatment and decision functions for training data
optTx(x = fit_AIPW)
# Estimated optimal treatment and decision functions for new data
optTx(x = fit_AIPW, newdata = data)
# Value object returned by outcome regression method
outcome(object = fit_AIPW)
# Plots if defined by regression methods
dev.new()
par(mfrow = c(2,4))
plot(x = fit_AIPW)
plot(x = fit_AIPW, suppress = TRUE)
# Retrieve the value object returned by propensity regression method
propen(object = fit_AIPW)
# Show main results of method
show(object = fit_AIPW)
# Show summary results of method
summary(object = fit_AIPW)
#estimated values for eta
regimeCoef(object = fit_AIPW)
range(T_final)
library(MASS)
N <- 3
T_final <- 60
T_stop <- 10 + sample(c(1,2,3,4,5), size=N, replace=TRUE, prob=c(0.1, 0.2, 0.2, 0.3, 0.2))
T_stop
# Baseline covariate, L ~ N(mu_0,Sigma_0)
mu_0 <- rep(0, 2)
Sigma_0 <- diag(2)
L <- mvrnorm(n = N, mu_0, Sigma_0, tol = 1e-6, empirical = FALSE)
mu_1 <- 10.0
mu_2 <- 0.1
# mu_3 <- 10.0
mu_4 <- 0.1
for(i in 1:N) {
X = range(T_final) # 500 points evenly spaced over [0,1]
ind_T_stop = (X >= T_stop[i]).astype(int)
mu_3 = mu_1 - mu_2*T_stop[i]
# vector of the means
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) \
+ ind_T_stop * mu_3*np.exp(-mu_4*(X - T_stop[i]))
X_ = X[:, None]
C = k.K(X_,X_) # covariance matrix
# Generate 10 sample path with mean mu and covariance C
Z = np.random.multivariate_normal(mu,C,20)
}
range(T_final)
T_stop[i]
T_stop(i)
(X >= T_stop[i])
X = range(T_final) # 500 points evenly spaced over [0,1]
(X >= T_stop[i])
ind_T_stop = as.numeric((X >= T_stop[i]))
range(T_final)
>range()
?range
c(1:T_final)
ind_T_stop <- as.numeric((X >= T_stop[i]))
X <- c(1:T_final) # 60 time points 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i]))
ind_T_stop
mu_3 <- mu_1 - mu_2*T_stop[i]
mu_3
X
as.matrix(X)
K <- rbfkernel(X, sigma=1) # covariance matrix
# Sampling from Gaussian process
install.packages(rdetools)
# Sampling from Gaussian process
install.packages("rdetools")
library(rdetools)
K <- rbfkernel(X, sigma=1) # covariance matrix
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix
exp(1)
+ ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
# vector of the means
mu = (1-ind_T_stop) * (mu_1 - mu_2*X)
+ ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
# vector of the means
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix
# Generate 10 sample path with mean mu and covariance C
Z = mvrnorm(n=20, mu, C, tol = 1e-6, empirical = FALSE)
# vector of the means
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix
K
View(K)
?mvrnorm
# Generate 10 sample path with mean mu and covariance C
Z = mvrnorm(n=20, mu, C)
mu
mu_0
Sigma_0
K
type(Sigma_0)
class(Sigma_0)
class(K)
# Generate 10 sample path with mean mu and covariance C
Z = mvrnorm(n = 20, mu, C)
# Generate 10 sample path with mean mu and covariance C
Z <- mvrnorm(n = 20, mu, C)
mvrnorm(n = 20, mu, C)
astype(my)
astype(mu)
typeof(my)
typeof(mu)
typeof(K)
typeof(mu_0)
L <- mvrnorm(n = N, mu_0, Sigma_0)
# Generate 10 sample path with mean mu and covariance C
Z <- mvrnorm(n = 20, mu, C)
(mu_1 - mu_2*X)
(1-ind_T_stop)
(1-ind_T_stop) * (mu_1 - mu_2*X)
ind_T_stop
mu_3*exp(-mu_4*(X - T_stop[i]))
ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
(1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
mu_0
?rbfkernel
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting
Z <- as.data.frame(Z)
Z
dat <- as.data.frame(c(colMeans(Z)))
View(dat)
dat <- as.data.frame(a=colMeans(Z))
library("matrixStats")
install.packages("matrixStats")
# Plotting
Z <- as.data.frame(Z)
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
# Plotting
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
View(dat)
library("matrixStats")
colSds(Z)
all.equal(colSds(Z), stdev)
ggplot(data=dat, aes(x=time, y=mean)) + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
theme_bw()
library(ggplot2)
ggplot(data=dat, aes(x=time, y=mean)) + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
theme_bw()
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
theme_bw()
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
title(cat("Patient",i)) + theme_bw()
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(cat("Patient",i)) + theme_bw()
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(c("Patient",i)) + theme_bw()
i
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) + theme_bw()
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i], label="Stop", y=0), angle=90) +
theme_bw()
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# X ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
}
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# X ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
p <- ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
p
}
1:N
cat("sadf", i)
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# X ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
p <- ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
p
cat("sadf", i)
}
# Sampling from Gaussian process
# install.packages("rdetools")
library(MASS)
library(rdetools)
library(ggplot2)
N <- 3
T_final <- 60
T_stop <- 10 + sample(c(1,2,3,4,5), size=N, replace=TRUE, prob=c(0.1, 0.2, 0.2, 0.3, 0.2))
T_stop
# Baseline covariate, L ~ N(mu_0,Sigma_0)
mu_0 <- rep(0, 2)
Sigma_0 <- diag(2)
L <- mvrnorm(n = N, mu_0, Sigma_0)
mu_1 <- 10.0
mu_2 <- 0.1
# mu_3 <- 10.0
mu_4 <- 0.1
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# X ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
p <- ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
p
}
print(p)
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# X ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
p <- ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
print(p)
}
# mu_3 <- 10.0
mu_4 <- 0.1
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# SOFA score, Z ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting mean and standard deviation across 20 samples of function
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
p <- ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
print(p)
}
T_stop <- 10 + sample(c(1,3,5,10,15), size=N, replace=TRUE, prob=c(0.1, 0.2, 0.2, 0.3, 0.2))
# Sampling from Gaussian process
# install.packages("rdetools")
library(MASS)
library(rdetools)
library(ggplot2)
N <- 3
T_final <- 60
T_stop <- 10 + sample(c(1,3,5,10,15), size=N, replace=TRUE, prob=c(0.1, 0.2, 0.2, 0.3, 0.2))
T_stop
# Baseline covariate, L ~ N(mu_0,Sigma_0)
mu_0 <- rep(0, 2)
Sigma_0 <- diag(2)
L <- mvrnorm(n = N, mu_0, Sigma_0)
mu_1 <- 10.0
mu_2 <- 0.1
# mu_3 <- 10.0
mu_4 <- 0.1
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# SOFA score, Z ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting mean and standard deviation across 20 samples of function
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
p <- ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
print(p)
}
T_stop
cat(T_stop)
# Sampling from Gaussian process
# install.packages("rdetools")
library(MASS)
library(rdetools)
library(ggplot2)
N <- 3 # number of patients
T_final <- 60 # total units of time to plot
T_stop <- 10 + sample(c(1,3,5,10,15), size=N,
replace=TRUE, prob=c(0.1, 0.2, 0.2, 0.3, 0.2)) # sample treatment stopping times
cat(T_stop)
# Baseline covariate, L ~ N(mu_0,Sigma_0)
mu_0 <- rep(0, 2)
Sigma_0 <- diag(2)
L <- mvrnorm(n = N, mu_0, Sigma_0)
mu_1 <- 10.0 # starting mean
mu_2 <- 0.1 # slope of linear decrease
# mu_3 <- 10.0
mu_4 <- 0.1 # scale of exponential decrease
for(i in 1:N) {
X <- c(1:T_final) # X is a vector of 60 time points each 1 unit apart
ind_T_stop <- as.numeric((X >= T_stop[i])) # binary vector indicating time points >= treatment stop time
mu_3 <- mu_1 - mu_2*T_stop[i] # mean at treatment stopping time
# SOFA score, Z ~ N(mu, K)
# Means for two separate case
# linear decrease before treatment stop: mu_1 - mu_2*X, and
# exponential decrease after treatment stop: mu_3*exp(-mu_4*(X - T_stop[i]))
mu = (1-ind_T_stop) * (mu_1 - mu_2*X) + ind_T_stop * mu_3*exp(-mu_4*(X - T_stop[i]))
K <- rbfkernel(as.matrix(X), sigma=1) # covariance matrix from RBF function
# Generate 10 sample path with mean mu and covariance matrix K
Z <- mvrnorm(n = 20, mu, K)
# Plotting mean and standard deviation across 20 samples of function
mean <- colMeans(Z)
stdev <- apply(Z, 2, sd)
dat <- data.frame("time" = X,
"mean" = mean,
"lower" = mean - stdev,
"upper" = mean + stdev)
p <- ggplot(data=dat, aes(x=time, y=mean)) + geom_point() + geom_line() +
geom_ribbon(aes(ymin=dat$lower, ymax=dat$upper), linetype=2, alpha=0.1) +
ggtitle(paste("Patient",i)) +
geom_vline(xintercept=T_stop[i]) +
geom_text(aes(x=T_stop[i]+1, label="Stop", y=0), angle=90) +
theme_bw()
print(p)
}
