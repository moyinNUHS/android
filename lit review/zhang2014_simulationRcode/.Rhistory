#tally isolates received and sent
sum(as.character(b2_assession_sent) %in% substr(bs_assession_received, 1, 13)) # all 291 sent are received
received.not.sent=bs_assession_received[!bs_assession_received %in% b2_assession_sent] #these received were not sent
knitr::opts_chunk$set(echo = TRUE)
#
dpois(x = 3, lambda = 5)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
0.3*15
dbinom(3, prob = 2/3, size=4)
dbinom(n=50, prob = 0.01, size=100)
rbinom(n=50, prob = 0.01, size=100)
rpois(1, lambda =50*0.01)
50*0.01
rpois(lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(50, lambda = 50*0.01)
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(n=10000, prob = 0.01, size=100))
sum(rbinom(n=10000, prob = 0.01, size=100))
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(n=10000, prob = 0.01, size=50))
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(n=10000, prob = 0.01, size=50))
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(50, prob = 0.01, size=50))
sum(rpois(50, lambda = 50*0.01))
load("../data/e100.RData")
library('Bioconductor')
install.packages('Bioconductor')
install.packages('msmb')
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
(rmultinom(1, prob = pvec, size = 8))
?rbinom
rmultinom(n = 8, prob =pvec, size = 1)
rmultinom(n = 1,prob = pvec, size = 8)
?rmultinom
library(stringr)
master=read.csv(file = '/Users/moyin/Documents/nBox/ST131/data/Consolidated WGS and EHI isolates_ST131.xlsx - Consolidated.csv')
master$Isolates.Accession=as.character(master$Isolates.Accession)
master$Isolates.Accession
master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)] = paste0(
substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 1, 10),
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12)))
master$Isolates.Accession
master=read.csv(file = '/Users/moyin/Documents/nBox/ST131/data/Consolidated WGS and EHI isolates_ST131.xlsx - Consolidated.csv')
master$Isolates.Accession=as.character(master$Isolates.Accession) #change assession to character
master$Isolates.Accession
master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)] = paste0(
substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 1, 10),
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12)))
master$Isolates.Accession
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12))
master=read.csv(file = '/Users/moyin/Documents/nBox/ST131/data/Consolidated WGS and EHI isolates_ST131.xlsx - Consolidated.csv')
master$Isolates.Accession=as.character(master$Isolates.Accession) #change assession to character
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12))
library("Biostrings")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
library('ggpubr')
install.packages('Biostrings')
setwd('Documents/nBox/angelsfly/android/')
setwd('../../git_projects/android/lit review/zhang2014_simulationRcode/')
file.edit('simulation1.r')
install.packages("rgenoud")
file.edit('sdiwp.r')
file.edit('sdmiwp.r')
install.packages("DynTxRegime")
n = 500
L1<-abs(rnorm(n,450,150))
A1<-rbinom(n,1,expit(2-0.006*L1))
expit <- function(x) { exp(x)/(1+exp(x)) }
A1<-rbinom(n,1,expit(2-0.006*L1))
L2<-abs(1.25*L1+rnorm(n,0,60))
rm(list=ls())
library(rgenoud)
library(MASS)
set.seed(123456)
source("sdmiwp.r")
source("sdiwp.r")
g2.m.o<-NULL
psi.o<-NULL
g2.m.p<-NULL
psi.p<-NULL
miwp.w<-NULL
iwp.w<-NULL
psi.Q<-NULL
Q<-NULL
A<-NULL
##############################################################################
n <- 500
s<-1000
T=1
psi10<-250
psi11<--1
psi20<-720
psi21<--2
seq.rand<-T
alpha0<-250
alpha1<--1
alpha2<-720
alpha3<--2
##############################################################################
expit <- function(x) { exp(x)/(1+exp(x)) }
generate<-function()
{
L1<-abs(rnorm(n,450,150))
if(seq.rand)
{A1<-rbinom(n,1,expit(2-0.006*L1))
} else
{
A1<-rbinom(n,1,0.5)
}
L2<-abs(1.25*L1+rnorm(n,0,60))
A2<-A1
if(seq.rand)
{
A2[A2==0]<-rbinom(n,1,expit(0.8-0.004*L2))[A2==0]
} else
{
A2[A2==0]<-rbinom(n,1,0.5)[A2==0]
}
L<-cbind(L1,L2)
A<-cbind(A1,A2)
psi10
rm(list=ls())
library(rgenoud)
library(MASS)
set.seed(123456)
source("sdmiwp.r")
source("sdiwp.r")
g2.m.o<-NULL
psi.o<-NULL
g2.m.p<-NULL
psi.p<-NULL
miwp.w<-NULL
iwp.w<-NULL
psi.Q<-NULL
Q<-NULL
A<-NULL
##############################################################################
n <- 500
s<-1000
T=1
psi10<-250
psi11<--1
psi20<-720
psi21<--2
seq.rand<-T
alpha0<-250
alpha1<--1
alpha2<-720
alpha3<--2
##############################################################################
expit <- function(x) { exp(x)/(1+exp(x)) }
generate<-function()
{
L1<-abs(rnorm(n,450,150))
if(seq.rand)
{A1<-rbinom(n,1,expit(2-0.006*L1))
} else
{
A1<-rbinom(n,1,0.5)
}
L2<-abs(1.25*L1+rnorm(n,0,60))
A2<-A1
if(seq.rand)
{
A2[A2==0]<-rbinom(n,1,expit(0.8-0.004*L2))[A2==0]
} else
{
A2[A2==0]<-rbinom(n,1,0.5)[A2==0]
}
L<-cbind(L1,L2)
A<-cbind(A1,A2)
sum.mus<-abs(psi10+psi11*L1)*(A1-as.numeric(psi10+psi11*L1>0))^2+(1-A1)*abs(psi20+psi21*L2)*(A2-as.numeric(psi20+psi21*L2>0))^2
Y.opt<-abs(400+1.6*L1+rnorm(n,0,60))
Y<-Y.opt-sum.mus
cbind(L1,A1,L2,A2,Y)
}
data<-lapply(1:s,function(i) generate())
?I
x0
x0exp<-abs(rnorm(m,450,150))
x1exp<-abs(rnorm(m,1.25*x0exp,60))
rm(list=ls())
library(rgenoud)
library(MASS)
set.seed(123456)
source("sdmiwp.r")
source("sdiwp.r")
g2.m.o<-NULL
psi.o<-NULL
g2.m.p<-NULL
psi.p<-NULL
miwp.w<-NULL
iwp.w<-NULL
psi.Q<-NULL
Q<-NULL
A<-NULL
##############################################################################
n <- 500
s<-1000
T=1
psi10<-250
psi11<--1
psi20<-720
psi21<--2
seq.rand<-T
alpha0<-250
alpha1<--1
alpha2<-720
alpha3<--2
##############################################################################
expit <- function(x) { exp(x)/(1+exp(x)) }
generate<-function()
{
L1<-abs(rnorm(n,450,150))
if(seq.rand)
{A1<-rbinom(n,1,expit(2-0.006*L1))
} else
{
A1<-rbinom(n,1,0.5)
}
L2<-abs(1.25*L1+rnorm(n,0,60))
A2<-A1
if(seq.rand)
{
A2[A2==0]<-rbinom(n,1,expit(0.8-0.004*L2))[A2==0]
} else
{
A2[A2==0]<-rbinom(n,1,0.5)[A2==0]
}
L<-cbind(L1,L2)
A<-cbind(A1,A2)
sum.mus<-abs(psi10+psi11*L1)*(A1-as.numeric(psi10+psi11*L1>0))^2+(1-A1)*abs(psi20+psi21*L2)*(A2-as.numeric(psi20+psi21*L2>0))^2
Y.opt<-abs(400+1.6*L1+rnorm(n,0,60))
Y<-Y.opt-sum.mus
cbind(L1,A1,L2,A2,Y)
}
data<-lapply(1:s,function(i) generate())
#############################################################################
m<-1000000
x0exp<-abs(rnorm(m,450,150))
x1exp<-abs(rnorm(m,1.25*x0exp,60))
evaluate(c(250,-1,360,-1))
evaluate<-function(eta) {
x0<-x0exp
x1<-x1exp
eta0<-eta[1]
eta1<-eta[2]
eta2<-eta[3]
eta3<-eta[4]
g0<-as.numeric(I(eta0+eta1*x0>0))
g1<-as.numeric(g0+(1-g0)*I(eta2+eta3*x1>0))
a0<-as.numeric(I(alpha0+alpha1*x0>0))
a1<-as.numeric(I(alpha2+alpha3*x1>0))
y<-400+1.6*x0-abs(alpha0+alpha1*x0)*(a0-g0)^2-(1-a0)*abs(alpha2+alpha3*x1)*(a1-g1)^2
mean(y)
}
obqrr<-function(eta) {
eta0<-eta[1]
eta1<-eta[2]
g0<-as.numeric(I(x0<eta0))
g1<-as.numeric(g0+(1-g0)*I(x1<eta1))
c<-as.numeric(I(a0==g0)*I(a1==g1))
c1<-as.numeric(I(a0!=g0))
c2<-as.numeric(I(a0==g0)*I(a1!=g1))
lamda1<-(1-g0)*ph0+g0*(1-ph0)
lamda2<-g1*(1-(g0+(1-g0)*ph1))+(1-g1)*(g0+(1-g0)*ph1)
pc<-(1-lamda1)*(1-lamda2)
ym0<-g0*m.1+(1-g0)*m.0
ym1<-g0*(m.10)+(1-g0)*(g1*m.01+(1-g1)*m.00)
mean(c/pc*y+(c1-lamda1)/(1-lamda1)*ym0+(c2-lamda2*I(a0==g0))/((1-lamda1)*(1-lamda2))*ym1)
}
obqrr1<-function(eta) {
eta0<-eta[1]
eta1<-eta[2]
g0<-as.numeric(I(x0<eta0))
g1<-as.numeric(g0+(1-g0)*I(x1<eta1))
c<-as.numeric(I(a0==g0)*I(a1==g1))
lamda1<-(1-g0)*ph0+g0*(1-ph0)
lamda2<-g1*(1-(g0+(1-g0)*ph1))+(1-g1)*(g0+(1-g0)*ph1)
pc<-(1-lamda1)*(1-lamda2)
mean(c/pc*y)
}
for(i in 1:s)
{
L1<-data[[i]][,1]
A1<-data[[i]][,2]
L2<-data[[i]][,3]
A2<-data[[i]][,4]
Y<-data[[i]][,5]
x0<-L1
a0<-A1
x1<-L2
a1<-A2
y<-Y
a0x0<-a0*x0
a00a1<-(1-a0)*a1
a00x1<-(1-a0)*x1
a00a1x1<-(1-a0)*a1*x1
dataH<-data.frame(x0,a0,x1,a1,y)
data0<-dataH[dataH[,2]==0,]
data1<-dataH[dataH[,2]==1,]
data00<-data0[data0[,4]==0,]
data01<-data0[data0[,4]==1,]
fit00<-lm(y~x0+a0+a0x0+a00x1+a00a1+a00a1x1)
beta<-summary(fit00)$coef[,1]
beta0.1<-beta[1]
beta1.1<-beta[2]
beta2.1<-beta[3]
beta3.1<-beta[4]
beta4.1<-beta[5]
beta5.1<-beta[6]
beta6.1<-beta[7]
etat1.Q<-c(beta5.1/abs(beta6.1),sign(beta6.1))
m.00<-beta0.1+beta1.1*x0+beta4.1*x1
m.01<-m.00+beta5.1+beta6.1*x1
m.10<-beta0.1+beta1.1*x0+beta2.1+beta3.1*x0
m.11<-m.10
y0<-y
y0[a0==0]<-ifelse(m.01[a0==0]>m.00[a0==0],m.01[a0==0],m.00[a0==0])
y0[a0==1]<-ifelse(m.11[a0==1]>m.10[a0==1],m.11[a0==1],m.10[a0==1])
fit0<-lm(y0~x0+a0+a0:x0)
beta<-summary(fit0)$coef[,1]
beta0.0<-beta[1]
beta1.0<-beta[2]
beta2.0<-beta[3]
beta3.0<-beta[4]
m.0<-beta0.0+beta1.0*x0
m.1<-beta0.0+beta1.0*x0+beta2.0+beta3.0*x0
etat0.Q<-c(beta2.0/abs(beta3.0),sign(beta3.0))
eta.Q<-c(etat0.Q,etat1.Q)
expY<-evaluate(eta.Q)
hatQ<-mean(ifelse(m.1>m.0,m.1,m.0))
summary<-c(eta.Q,hatQ,expY)
Q<-rbind(Q,t(summary))
rm(list=ls())
library(rgenoud)
library(MASS)
set.seed(123456)
source("sdmiwp.r")
source("sdiwp.r")
g2.m.o<-NULL
psi.o<-NULL
g2.m.p<-NULL
psi.p<-NULL
miwp.w<-NULL
iwp.w<-NULL
psi.Q<-NULL
Q<-NULL
A<-NULL
##############################################################################
n <- 500
s<-1000
T=1
psi10<-250
psi11<--1
psi20<-720
psi21<--2
seq.rand<-T
alpha0<-250
alpha1<--1
alpha2<-720
alpha3<--2
expit <- function(x) { exp(x)/(1+exp(x)) }
generate<-function()
{
L1<-abs(rnorm(n,450,150))
if(seq.rand)
{A1<-rbinom(n,1,expit(2-0.006*L1))
} else
{
A1<-rbinom(n,1,0.5)
}
L2<-abs(1.25*L1+rnorm(n,0,60))
A2<-A1
if(seq.rand)
{
A2[A2==0]<-rbinom(n,1,expit(0.8-0.004*L2))[A2==0]
} else
{
A2[A2==0]<-rbinom(n,1,0.5)[A2==0]
}
L<-cbind(L1,L2)
A<-cbind(A1,A2)
sum.mus<-abs(psi10+psi11*L1)*(A1-as.numeric(psi10+psi11*L1>0))^2+(1-A1)*abs(psi20+psi21*L2)*(A2-as.numeric(psi20+psi21*L2>0))^2
Y.opt<-abs(400+1.6*L1+rnorm(n,0,60))
Y<-Y.opt-sum.mus
cbind(L1,A1,L2,A2,Y)
}
data<-lapply(1:s,function(i) generate())
m<-1000000
x0exp<-abs(rnorm(m,450,150))
x1exp<-abs(rnorm(m,1.25*x0exp,60))
evaluate(c(250,-1,360,-1))
evaluate<-function(eta) {
x0<-x0exp
x1<-x1exp
eta0<-eta[1]
eta1<-eta[2]
eta2<-eta[3]
eta3<-eta[4]
g0<-as.numeric(I(eta0+eta1*x0>0))
g1<-as.numeric(g0+(1-g0)*I(eta2+eta3*x1>0))
a0<-as.numeric(I(alpha0+alpha1*x0>0))
a1<-as.numeric(I(alpha2+alpha3*x1>0))
y<-400+1.6*x0-abs(alpha0+alpha1*x0)*(a0-g0)^2-(1-a0)*abs(alpha2+alpha3*x1)*(a1-g1)^2
mean(y)
}
obqrr<-function(eta) {
eta0<-eta[1]
eta1<-eta[2]
g0<-as.numeric(I(x0<eta0))
g1<-as.numeric(g0+(1-g0)*I(x1<eta1))
c<-as.numeric(I(a0==g0)*I(a1==g1))
c1<-as.numeric(I(a0!=g0))
c2<-as.numeric(I(a0==g0)*I(a1!=g1))
lamda1<-(1-g0)*ph0+g0*(1-ph0)
lamda2<-g1*(1-(g0+(1-g0)*ph1))+(1-g1)*(g0+(1-g0)*ph1)
pc<-(1-lamda1)*(1-lamda2)
ym0<-g0*m.1+(1-g0)*m.0
ym1<-g0*(m.10)+(1-g0)*(g1*m.01+(1-g1)*m.00)
mean(c/pc*y+(c1-lamda1)/(1-lamda1)*ym0+(c2-lamda2*I(a0==g0))/((1-lamda1)*(1-lamda2))*ym1)
}
obqrr1<-function(eta) {
eta0<-eta[1]
eta1<-eta[2]
g0<-as.numeric(I(x0<eta0))
g1<-as.numeric(g0+(1-g0)*I(x1<eta1))
c<-as.numeric(I(a0==g0)*I(a1==g1))
lamda1<-(1-g0)*ph0+g0*(1-ph0)
lamda2<-g1*(1-(g0+(1-g0)*ph1))+(1-g1)*(g0+(1-g0)*ph1)
pc<-(1-lamda1)*(1-lamda2)
mean(c/pc*y)
}
seq.rand<-T
seq.rand
T
?T
seq.rand<-True
a = 1:2
b=3:4
cbind(a,b)
#Set up
rm(list=ls())
library(rgenoud); library(MASS)
set.seed(123456)
source("sdmiwp.r")
source("sdiwp.r")
###############################Define Objects################################
g2.m.o<-NULL; g2.m.p<-NULL
psi.o<-NULL; psi.Q<-NUL; psi.p<-NULL
miwp.w<-NULL; iwp.w<-NULL
Q<-NULL; A<-NULL
n <- 500 #number of patients in each simulation
s <-1000 #number of simulations
T=1; seq.rand <- T #if sequentially randomised
#objects for simulation of data
psi10<-250; psi11<--1 #CD4 at time point 1
psi20<-720; psi21<--2 #CD4 at time point 2
#objects for evaluation of data
alpha0<-250; alpha1<--1 #CD4 at time point 1
alpha2<-720; alpha3<--2 #CD4 at time point 2
###############################Define Functions################################
expit <- function(x) { exp(x)/(1+exp(x)) }
## generation of simulated data
generate<-function() {
#CD4 and decision at time point one
L1<-abs(rnorm(n,450,150)) #CD4 at time point one
if(seq.rand) { #if following optimal regime at time point one
A1<-rbinom(n, 1, expit(2-0.006*L1)) #1st decision is based on L1
} else { #if NOT following optimal regime at time point one
A1<-rbinom(n,1,0.5) #1st decision is 50%/50%
}
#CD4 and decision at time point two
L2<-abs(1.25*L1+rnorm(n,0,60)) #CD4 at time point two (increasing with time)
A2<-A1 #apply first decision to the second decision i.e. if started at time point 1, then continue treatment
if(seq.rand) { #if following optimal regime at time point two
#2nd decision is based on L2 for those who have not started treatment
A2[A2==0]<-rbinom(n,1,expit(0.8-0.004*L2))[A2==0]
} else { #if NOT following optimal regime at time point two
A2[A2==0]<-rbinom(n,1,0.5)[A2==0] #2nd decision is 50%/50%
}
L<-cbind(L1,L2) #combine columns of L1 and L2 ??not used later on??
A<-cbind(A1,A2) #combine columns of A1 and A2 ??not used later on??
# equation on pg 689 (1st line) - gives reduction in CD4 if A1 and A2 are not according to optimal regime
sum.mus<-abs(psi10+psi11*L1)*(A1-as.numeric(psi10+psi11*L1>0))^2+(1-A1)*abs(psi20+psi21*L2)*(A2-as.numeric(psi20+psi21*L2>0))^2
Y.opt<-abs(400+1.6*L1+rnorm(n,0,60)) # optimal CD4 at time point two (increasing trend)
Y<-Y.opt-sum.mus # actual CD4 according to actual regime (sum.mus = 0 if optimal regime applied)
cbind(L1,A1,L2,A2,Y) #gives a matric of the simulated values
}
## gives s number of matrices containing simulated data
data<-lapply(1:s,function(i) generate())
head(data)
str(data)
length(data)
